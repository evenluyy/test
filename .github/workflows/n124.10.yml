name: Build ImmortalWrt for N1 24

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: N1/.config
  DIY_SH: N1/diy.sh
  FILES: N1/files
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Free up space
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: Initialize environment
      env:
       DEBIAN_FRONTEND: noninteractive
       run: |
         # 修复可能存在的包问题
         sudo apt-get update
         sudo apt-get --fix-broken install -y
         sudo apt-get dist-upgrade -y

         # 安装编译依赖
         sudo apt-get install -y \
         ack antlr3 asciidoc autoconf automake autopoint binutils bison \
         build-essential bzip2 ccache clang cmake cpio curl device-tree-compiler \
         ecj fastjar flex gawk gettext gcc-multilib g++-multilib git gnutls-dev \
         gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
         libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev \
         libncurses-dev libpython3-dev libreadline-dev libssl-dev libtool \
         libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano ninja-build \
         p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply \
         python3-docutils python3-pyelftools qemu-utils re2c rsync scons \
         squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim \
         wget xmlto xxd zlib1g-dev zstd \
         libfuse-dev fuse sed gawk coreutils file \
         libtool-bin pkg-config \
         gettext texinfo

         # 清理
         sudo apt-get autoremove --purge -y
         sudo apt-get clean
         sudo timedatectl set-timezone "$TZ"
         sudo mkdir -p /workdir
         sudo chown $USER:$GROUPS /workdir
 
    - name: Setup Go and CGO
      run: |
        sudo apt-get install -y golang-1.21 gccgo
        sudo ln -sf /usr/lib/go-1.21/bin/go /usr/bin/go
        echo "GOPATH=/workdir/go" >> $GITHUB_ENV
        echo "CGO_ENABLED=1" >> $GITHUB_ENV
        mkdir -p /workdir/go

    - name: Set cross-compile CGO env
      run: |
        echo "GOARCH=arm64" >> $GITHUB_ENV
        echo "GOOS=linux" >> $GITHUB_ENV
        echo "CC=aarch64-openwrt-linux-musl-gcc" >> $GITHUB_ENV
        echo "CXX=aarch64-openwrt-linux-musl-g++" >> $GITHUB_ENV

    - name: Clone source code
      working-directory: /workdir
      run: |
        git clone $REPO_URL -b $REPO_BRANCH --single-branch --depth=1 openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        ./scripts/feeds install libfuse
        ./scripts/feeds install golang

    - name: Configure CGO and FUSE
      working-directory: ./openwrt
      run: |
        echo "CONFIG_PACKAGE_GO_CGO_ENABLED=y" >> .config
        echo "CONFIG_PACKAGE_kmod-fuse=y" >> .config
        echo "CONFIG_PACKAGE_libfuse=y" >> .config
        echo "CONFIG_PACKAGE_cdnspeedtest=y" >> .config
        make prereq v=s
        make defconfig

    - name: Load custom config
      run: |
        [ -e $FILES ] && mv $FILES openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_SH

    - name: Configure FUSE and dependencies
      working-directory: ./openwrt
      run: |
        echo "CONFIG_FUSE_FS=y" >> .config
        echo "CONFIG_PACKAGE_kmod-fuse=y" >> .config
        echo "CONFIG_PACKAGE_libfuse=y" >> .config
        echo "CONFIG_PACKAGE_alist=y" >> .config
        echo "CONFIG_PACKAGE_cdnspeedtest=y" >> .config
        make defconfig

    - name: SSH connect to Actions
      uses: P3TERX/ssh2actions@main
      if: (github.event.inputs.ssh == 'true') || contains(github.event.action, 'ssh')

    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j8
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      run: |
        chmod -R 755 openwrt
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "compile_status=success" >> $GITHUB_ENV
        rm -rf ${{ github.workspace }}/openwrt/bin/targets/*/*/packages
        df -hT

    - name: Free up space2
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true
        go-cache: true

    - name: 清理磁盘空间
      run: |
        mkdir openwrt-armvirt
        mkdir /workdir/upload
        cp openwrt/bin/targets/*/*/*.tar.gz /workdir/upload/
        mv openwrt/bin/targets/*/*/*.tar.gz openwrt-armvirt/
        sudo du -h --max-depth=1 /workdir | sort -nr | head -10

    - name: Package armsr as openwrt
      if: ${{ env.compile_status }} == 'success' && !cancelled()
      uses: unifreq/openwrt_packit@master
      env:
        OPENWRT_ARMVIRT: openwrt-armvirt/*.tar.gz
        KERNEL_VERSION_NAME: 6.6.y_6.12.y
        KERNEL_AUTO_LATEST: true
        PACKAGE_SOC: diy
        GZIP_IMGS: .xz
        KERNEL_TAGS: flippy
        KERNEL_REPO_URL: ophub/kernel
        SCRIPT_DIY_PATH: N1/mk_s905d_n1.sh
        WHOAMI: test
        SW_FLOWOFFLOAD: 0
        SFE_FLOW: 0

    - name: 整理文件
      run: mv /opt/openwrt_packit/output/* /workdir/upload/

    - name: Upload firmware to release
      uses: ncipollo/release-action@v1
      if: ${{ env.PACKAGED_STATUS == 'success' }} && !cancelled()
      with:
        tag: OpenWrt_${{ env.PACKAGED_OUTPUTDATE }}
        artifacts: /workdir/upload/*
        allowUpdates: true
        token: ${{ secrets.GI_TOKEN }}
        body: |
          首次使用建议全新刷写
          * 基本信息
          IP: 192.168.110.247
          账户: root
          密码: password

    - name: Delete old workflow runs
      uses: Mattraks/delete-workflow-runs@v2.0.6
      with:
         token: ${{ secrets.GI_TOKEN }}
         repository: ${{ github.repository }}
         retain_days: 1
         keep_minimum_runs: 0

    - name: Delete old releases
      uses: dev-drprasad/delete-older-releases@v0.3.4
      with:
        keep_latest: 1
        delete_tag: true
        repo: ${{ github.repository }}
      env:
        GITHUB_TOKEN: ${{ secrets.GI_TOKEN }}
